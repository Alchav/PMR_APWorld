{
    # Rules here define replacement "functions" or item aliases.
    # The alias itself must always be alphanumeric only--string items bypass the aliasing.
    # Rules should be simple python and can invoke other aliases or even the
    # at/here metarules.
    "Boots": "(Boots, 1)",
    "Super_Boots": "(Boots, 2)",
    "Ultra_Boots": "(Boots, 3)",
    "Hammer": "(Hammers, 1)",
    "Super_Hammer": "(Hammers, 2)",
    "Ultra_Hammer": "(Hammers, 3)",

    "can_flip_panels": "Ultra_Hammer or Super_Boots",

    # This also applies to breaking yellow blocks, though the game never tells you that you can use Bombette
    "can_shake_trees": "Bombette or Hammer",

    "can_hit_grounded_blocks": "can_use_ability_bombette or can_use_ability_kooper or Super_Boots or Hammer",
    "can_hit_floating_blocks": "can_use_ability_kooper or Boots",
    "can_hit_grounded_switches": "can_use_ability_bombette or can_use_ability_kooper or Boots or Hammer or can_use_ability_parakarry",

    # Steps are not literal stairs, but terrain too tall to walk up, requiring you to jump (or use Parakarry)
    # Jumping gains more height than Parakarry, so not all 'steps' can be climbed with Parakarry
    # Parakarry also cannot be used to go forward or back, only left or right
    # If logic requires boots, Parakarry is likely either unable to be used there or requires overly-precise positioning
    "can_climb_steps": "Boots or can_use_ability_parakarry",
    "saved_all_yoshi_kids": "'RF_SavedYoshiKid_1' and 'RF_SavedYoshiKid_2' and 'RF_SavedYoshiKid_3' and 'RF_SavedYoshiKid_4' and 'RF_SavedYoshiKid_5'",
    "can_reenter_vertical_pipes": "can_use_ability_kooper or Boots or can_use_ability_parakarry",

    "can_see_hidden_blocks": "can_use_ability_watt or hidden_block_mode == 3",
    "can_reach_star_way": "('STARSPIRIT', star_spirits_required)",

    "can_use_ability_kooper": "Kooper or partners_always_usable",
    "can_use_ability_bombette": "Bombette or partners_always_usable",
    "can_use_ability_parakarry": "Parakarry or partners_always_usable",
    "can_use_ability_bow": "Bow or partners_always_usable",
    "can_use_ability_watt": "Watt or partners_always_usable",
    "can_use_ability_sushie": "Sushie or partners_always_usable",
    "can_use_ability_lakilester": "Lakilester or partners_always_usable"
}